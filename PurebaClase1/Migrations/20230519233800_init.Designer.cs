// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PurebaClase1.Models.dbModels;

#nullable disable

namespace PurebaClase1.Migrations
{
    [DbContext(typeof(ProyectoBDContext))]
    [Migration("20230519233800_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdDireccion")
                        .HasColumnType("text");

                    b.Property<decimal?>("IdMetododePago")
                        .HasColumnType("numeric(18,0)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Carrito", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("IdRopa")
                        .HasColumnType("int");

                    b.Property<string>("Cantidad")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("IdUsuario", "IdRopa");

                    b.HasIndex("IdRopa");

                    b.ToTable("Carrito");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.CategoriaRopa", b =>
                {
                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCategoria");

                    b.ToTable("CategoriaRopa");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.CategoriaTicket", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCategoria");

                    b.ToTable("CategoriaTicket");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Color", b =>
                {
                    b.Property<int>("IdColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdColor"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdColor");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.DetallesDeVenta", b =>
                {
                    b.Property<int>("IdVentas")
                        .HasColumnType("int");

                    b.Property<int>("IdRopa")
                        .HasColumnType("int");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("numeric(18,0)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money");

                    b.HasKey("IdVentas", "IdRopa");

                    b.HasIndex("IdRopa");

                    b.ToTable("DetallesDeVentas");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Direccion", b =>
                {
                    b.Property<int>("IdDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDireccion"), 1L, 1);

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("Colonia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("NoExt")
                        .HasColumnType("int")
                        .HasColumnName("No_Ext");

                    b.HasKey("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Direccion");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.MetodoDePago", b =>
                {
                    b.Property<int>("IdMetododepago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMetododepago"), 1L, 1);

                    b.Property<int>("Cvv")
                        .HasColumnType("int")
                        .HasColumnName("CVV");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("NumeroDeTarjeta")
                        .HasColumnType("int");

                    b.Property<string>("Titular")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdMetododepago");

                    b.HasIndex("IdUsuario");

                    b.ToTable("MetodoDePago");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Ropa", b =>
                {
                    b.Property<int>("IdRopa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRopa"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("IdColor")
                        .HasColumnType("int");

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("image");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdRopa");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdColor");

                    b.ToTable("Ropa");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.RopaTalla", b =>
                {
                    b.Property<int>("IdRopa")
                        .HasColumnType("int");

                    b.Property<int>("IdTalla")
                        .HasColumnType("int");

                    b.Property<string>("Cantidad")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("IdRopa", "IdTalla");

                    b.HasIndex("IdTalla");

                    b.ToTable("RopaTalla");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Talla", b =>
                {
                    b.Property<int>("IdTalla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTalla"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("IdTalla");

                    b.ToTable("Talla");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Ticket", b =>
                {
                    b.Property<int>("IdTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTicket"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("IdTicket");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Venta", b =>
                {
                    b.Property<int>("IdVentas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVentas"), 1L, 1);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdUsuarios")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("IdVentas");

                    b.HasIndex("IdUsuarios");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PurebaClase1.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Carrito", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.Ropa", "IdRopaNavigation")
                        .WithMany("Carritos")
                        .HasForeignKey("IdRopa")
                        .IsRequired()
                        .HasConstraintName("FK_Carrito_Ropa");

                    b.HasOne("PurebaClase1.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Carritos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Carrito_Usuarios");

                    b.Navigation("IdRopaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.DetallesDeVenta", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.Ropa", "IdRopaNavigation")
                        .WithMany("DetallesDeVenta")
                        .HasForeignKey("IdRopa")
                        .IsRequired()
                        .HasConstraintName("FK_DetallesDeVentas_Ropa");

                    b.HasOne("PurebaClase1.Models.dbModels.Venta", "IdVentasNavigation")
                        .WithMany("DetallesDeVenta")
                        .HasForeignKey("IdVentas")
                        .IsRequired()
                        .HasConstraintName("FK_DetallesDeVentas_Ventas");

                    b.Navigation("IdRopaNavigation");

                    b.Navigation("IdVentasNavigation");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Direccion", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Direccions")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Direccion_Usuarios");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.MetodoDePago", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("MetodoDePagos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_MetodoDePago_Usuarios");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Ropa", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.CategoriaRopa", "IdCategoriaNavigation")
                        .WithMany("Ropas")
                        .HasForeignKey("IdCategoria")
                        .IsRequired()
                        .HasConstraintName("FK_Ropa_CategoriaRopa");

                    b.HasOne("PurebaClase1.Models.dbModels.Color", "IdColorNavigation")
                        .WithMany("Ropas")
                        .HasForeignKey("IdColor")
                        .IsRequired()
                        .HasConstraintName("FK_Ropa_Color");

                    b.Navigation("IdCategoriaNavigation");

                    b.Navigation("IdColorNavigation");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.RopaTalla", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.Ropa", "IdRopaNavigation")
                        .WithMany("RopaTallas")
                        .HasForeignKey("IdRopa")
                        .IsRequired()
                        .HasConstraintName("FK_RopaTalla_Ropa");

                    b.HasOne("PurebaClase1.Models.dbModels.Talla", "IdTallaNavigation")
                        .WithMany("RopaTallas")
                        .HasForeignKey("IdTalla")
                        .IsRequired()
                        .HasConstraintName("FK_RopaTalla_Talla");

                    b.Navigation("IdRopaNavigation");

                    b.Navigation("IdTallaNavigation");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Ticket", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.CategoriaTicket", "IdCategoriaNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_Ticket_CategoriaTicket");

                    b.HasOne("PurebaClase1.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Usuarios");

                    b.Navigation("IdCategoriaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Venta", b =>
                {
                    b.HasOne("PurebaClase1.Models.dbModels.ApplicationUser", "IdUsuariosNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("IdUsuarios")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ventas_Usuarios");

                    b.Navigation("IdUsuariosNavigation");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.ApplicationUser", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("Direccions");

                    b.Navigation("MetodoDePagos");

                    b.Navigation("Tickets");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.CategoriaRopa", b =>
                {
                    b.Navigation("Ropas");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.CategoriaTicket", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Color", b =>
                {
                    b.Navigation("Ropas");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Ropa", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("DetallesDeVenta");

                    b.Navigation("RopaTallas");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Talla", b =>
                {
                    b.Navigation("RopaTallas");
                });

            modelBuilder.Entity("PurebaClase1.Models.dbModels.Venta", b =>
                {
                    b.Navigation("DetallesDeVenta");
                });
#pragma warning restore 612, 618
        }
    }
}
